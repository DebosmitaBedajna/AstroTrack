{"ast":null,"code":"var _jsxFileName = \"/home/debosmitabedajna/Desktop/astrotrack/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Sphere, Stars } from '@react-three/drei';\nimport * as THREE from 'three';\nimport \"./App.css\";\nimport earthmap1k from './earthmap1k.jpg';\nimport earthbump1k from './earthbump1k.jpg';\nimport earthcloudmap from './earthcloudmap.jpg';\n\n// Fetch satellite data (Celestrak API example)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function fetchSatellites() {\n  const response = await fetch('https://celestrak.com/NORAD/elements/gp.php?GROUP=active&FORMAT=json');\n  const data = await response.json();\n  return data;\n}\nfunction SpinningGlobe() {\n  _s();\n  const globeRef = useRef();\n  const cloudRef = useRef();\n  const [satellites, setSatellites] = useState([]);\n  useEffect(() => {\n    fetchSatellites().then(data => {\n      setSatellites(data);\n    });\n  }, []);\n  useFrame(() => {\n    if (globeRef.current) {\n      globeRef.current.rotation.y += 0.01;\n    }\n    if (cloudRef.current) {\n      cloudRef.current.rotation.y += 0.015;\n    }\n  });\n  const earthTexture = new THREE.TextureLoader().load(earthmap1k);\n  const bumpMap = new THREE.TextureLoader().load(earthbump1k);\n  const cloudMap = new THREE.TextureLoader().load(earthcloudmap);\n\n  // Function to convert satellite data to positions\n  function getSatellitePositions() {\n    return satellites.map((sat, index) => {\n      const angle = index * (2 * Math.PI / satellites.length); // Spread satellites evenly\n      const radius = 2.5; // Distance from the Earth\n      const x = radius * Math.cos(angle);\n      const y = radius * Math.sin(angle);\n      const z = radius * Math.sin(angle) * Math.cos(angle);\n      return {\n        x,\n        y,\n        z\n      };\n    });\n  }\n  const satellitePositions = getSatellitePositions();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Sphere, {\n      ref: globeRef,\n      args: [2, 32, 32],\n      scale: 1,\n      children: /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        attach: \"material\",\n        map: earthTexture,\n        bumpMap: bumpMap,\n        bumpScale: 0.05,\n        metalness: 0.5,\n        roughness: 0.7\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sphere, {\n      ref: cloudRef,\n      args: [2.05, 32, 32],\n      scale: 1,\n      children: /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        attach: \"material\",\n        map: cloudMap,\n        transparent: true,\n        opacity: 0.2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), satellitePositions.map((pos, index) => /*#__PURE__*/_jsxDEV(Sphere, {\n      args: [0.05, 16, 16],\n      position: [pos.x, pos.y, pos.z],\n      children: /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        attach: \"material\",\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n_s(SpinningGlobe, \"4ex+K34GSI91PSPmlEeVDyj52+g=\", false, function () {\n  return [useFrame];\n});\n_c = SpinningGlobe;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [0, 0, 5],\n      fov: 50\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [5, 5, 5],\n      intensity: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stars, {\n      radius: 100,\n      depth: 50,\n      count: 5000,\n      factor: 7,\n      saturation: 0,\n      fade: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SpinningGlobe, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"SpinningGlobe\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Canvas","useFrame","OrbitControls","Sphere","Stars","THREE","earthmap1k","earthbump1k","earthcloudmap","jsxDEV","_jsxDEV","Fragment","_Fragment","fetchSatellites","response","fetch","data","json","SpinningGlobe","_s","globeRef","cloudRef","satellites","setSatellites","then","current","rotation","y","earthTexture","TextureLoader","load","bumpMap","cloudMap","getSatellitePositions","map","sat","index","angle","Math","PI","length","radius","x","cos","sin","z","satellitePositions","children","ref","args","scale","attach","bumpScale","metalness","roughness","fileName","_jsxFileName","lineNumber","columnNumber","transparent","opacity","pos","position","color","_c","App","camera","fov","intensity","depth","count","factor","saturation","fade","_c2","$RefreshReg$"],"sources":["/home/debosmitabedajna/Desktop/astrotrack/src/App.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Sphere, Stars } from '@react-three/drei';\nimport * as THREE from 'three';\nimport \"./App.css\";\nimport earthmap1k from './earthmap1k.jpg';\nimport earthbump1k from './earthbump1k.jpg';\nimport earthcloudmap from './earthcloudmap.jpg';\n\n// Fetch satellite data (Celestrak API example)\nasync function fetchSatellites() {\n  const response = await fetch('https://celestrak.com/NORAD/elements/gp.php?GROUP=active&FORMAT=json');\n  const data = await response.json();\n  return data;\n}\n\nfunction SpinningGlobe() {\n  const globeRef = useRef();\n  const cloudRef = useRef();\n  const [satellites, setSatellites] = useState([]);\n\n  useEffect(() => {\n    fetchSatellites().then(data => {\n      setSatellites(data);\n    });\n  }, []);\n\n  useFrame(() => {\n    if (globeRef.current) {\n      globeRef.current.rotation.y += 0.01;\n    }\n    if (cloudRef.current) {\n      cloudRef.current.rotation.y += 0.015;\n    }\n  });\n\n  const earthTexture = new THREE.TextureLoader().load(earthmap1k);\n  const bumpMap = new THREE.TextureLoader().load(earthbump1k);\n  const cloudMap = new THREE.TextureLoader().load(earthcloudmap);\n\n  // Function to convert satellite data to positions\n  function getSatellitePositions() {\n    return satellites.map((sat, index) => {\n      const angle = index * (2 * Math.PI / satellites.length); // Spread satellites evenly\n      const radius = 2.5; // Distance from the Earth\n      const x = radius * Math.cos(angle);\n      const y = radius * Math.sin(angle);\n      const z = radius * Math.sin(angle) * Math.cos(angle);\n      return { x, y, z };\n    });\n  }\n\n  const satellitePositions = getSatellitePositions();\n\n  return (\n    <>\n      <Sphere ref={globeRef} args={[2, 32, 32]} scale={1}>\n        <meshStandardMaterial\n          attach=\"material\"\n          map={earthTexture}\n          bumpMap={bumpMap}\n          bumpScale={0.05}\n          metalness={0.5}\n          roughness={0.7}\n        />\n      </Sphere>\n      <Sphere ref={cloudRef} args={[2.05, 32, 32]} scale={1}>\n        <meshBasicMaterial\n          attach=\"material\"\n          map={cloudMap}\n          transparent\n          opacity={0.2}\n        />\n      </Sphere>\n\n      {/* Render satellites */}\n      {satellitePositions.map((pos, index) => (\n        <Sphere key={index} args={[0.05, 16, 16]} position={[pos.x, pos.y, pos.z]}>\n          <meshBasicMaterial attach=\"material\" color=\"red\" />\n        </Sphere>\n      ))}\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <Canvas camera={{ position: [0, 0, 5], fov: 50 }}>\n      <ambientLight intensity={0.5} />\n      <directionalLight position={[5, 5, 5]} intensity={1} />\n      <Stars radius={100} depth={50} count={5000} factor={7} saturation={0} fade />\n      <OrbitControls />\n      <SpinningGlobe />\n    </Canvas>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}