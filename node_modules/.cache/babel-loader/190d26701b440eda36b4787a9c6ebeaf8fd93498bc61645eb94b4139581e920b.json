{"ast":null,"code":"var _jsxFileName = \"/home/debosmitabedajna/Desktop/astrotrack/src/App.js\",\n  _s = $RefreshSig$();\nimport earthmap1k from './earthmap1k.jpg';\nimport earthbump1k from './earthbump1k.jpg';\nimport earthcloudmap from './earthcloudmap.jpg';\nimport moonmap1k from './moonmap1k.jpg';\nimport moonbump1k from './moonbump1k.jpg';\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Sphere, Stars } from '@react-three/drei';\nimport * as THREE from 'three';\nimport satellite from 'satellite.js';\nimport axios from 'axios';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SpinningGlobe() {\n  _s();\n  const globeRef = useRef();\n  const cloudRef = useRef();\n  const moonRef = useRef();\n  const satelliteRef = useRef([]);\n  const [satelliteData, setSatelliteData] = useState([]);\n  useEffect(() => {\n    // Fetch satellite data from Celestrak (replace with your API endpoint)\n    axios.get('https://celestrak.com/NORAD/elements/tle-latest.txt').then(response => {\n      const lines = response.data.split('\\n');\n      const tleData = [];\n      for (let i = 0; i < lines.length; i += 3) {\n        tleData.push({\n          name: lines[i],\n          tle1: lines[i + 1],\n          tle2: lines[i + 2]\n        });\n      }\n      setSatelliteData(tleData);\n    }).catch(error => {\n      console.error('Error fetching satellite data:', error);\n    });\n  }, []);\n  useFrame(() => {\n    if (globeRef.current) {\n      globeRef.current.rotation.y += 0.01;\n    }\n    if (cloudRef.current) {\n      cloudRef.current.rotation.y += 0.015;\n    }\n    if (moonRef.current) {\n      moonRef.current.position.x = Math.sin(Date.now() / 1000) * 12;\n      moonRef.current.position.z = Math.cos(Date.now() / 1000) * 12;\n    }\n\n    // Update satellite positions\n    satelliteRef.current.forEach((satellite, index) => {\n      const satrec = satellite.satrec;\n      const position = satellite.position;\n      const now = new Date();\n      const positionEci = satellite.positionFromTLE(satrec, now);\n      const positionGd = satellite.eciToGeodetic(positionEci, now);\n      satellite.position.set(positionGd.longitude * 111.32, positionGd.latitude * 111.32, positionGd.altitude * 1000);\n    });\n  });\n  const earthTexture = new THREE.TextureLoader().load(earthmap1k);\n  const bumpMap = new THREE.TextureLoader().load(earthbump1k);\n  const cloudMap = new THREE.TextureLoader().load(earthcloudmap);\n  const moonTexture = new THREE.TextureLoader().load(moonmap1k);\n  const moonBumpMap = new THREE.TextureLoader().load(moonbump1k);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Sphere, {\n      ref: globeRef,\n      args: [2, 32, 32],\n      scale: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sphere, {\n      ref: cloudRef,\n      args: [2.05, 32, 32],\n      scale: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sphere, {\n      ref: moonRef,\n      args: [1, 10, 10],\n      scale: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), satelliteData.map((satellite, index) => /*#__PURE__*/_jsxDEV(Sphere, {\n      ref: ref => {\n        satelliteRef.current[index] = ref;\n      },\n      args: [0.1, 8, 8],\n      scale: 1,\n      children: /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n_s(SpinningGlobe, \"fBBifRH7Iax3HwCAhxZFLWkBOhA=\", false, function () {\n  return [useFrame];\n});\n_c = SpinningGlobe;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [0, 0, 5],\n      fov: 50\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"SpinningGlobe\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["earthmap1k","earthbump1k","earthcloudmap","moonmap1k","moonbump1k","React","useRef","useEffect","useState","Canvas","useFrame","OrbitControls","Sphere","Stars","THREE","satellite","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","SpinningGlobe","_s","globeRef","cloudRef","moonRef","satelliteRef","satelliteData","setSatelliteData","get","then","response","lines","data","split","tleData","i","length","push","name","tle1","tle2","catch","error","console","current","rotation","y","position","x","Math","sin","Date","now","z","cos","forEach","index","satrec","positionEci","positionFromTLE","positionGd","eciToGeodetic","set","longitude","latitude","altitude","earthTexture","TextureLoader","load","bumpMap","cloudMap","moonTexture","moonBumpMap","children","ref","args","scale","fileName","_jsxFileName","lineNumber","columnNumber","map","color","_c","App","camera","fov","_c2","$RefreshReg$"],"sources":["/home/debosmitabedajna/Desktop/astrotrack/src/App.js"],"sourcesContent":["import earthmap1k from './earthmap1k.jpg';\nimport earthbump1k from './earthbump1k.jpg';\nimport earthcloudmap from './earthcloudmap.jpg';\nimport moonmap1k from './moonmap1k.jpg';\nimport moonbump1k from './moonbump1k.jpg';\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Sphere, Stars } from '@react-three/drei';\nimport * as THREE from 'three';\nimport satellite from 'satellite.js';\nimport axios from 'axios';\nimport \"./App.css\";\n\nfunction SpinningGlobe() {\n  const globeRef = useRef();\n  const cloudRef = useRef();\n  const moonRef = useRef();\n  const satelliteRef = useRef([]);\n\n  const [satelliteData, setSatelliteData] = useState([]);\n\n  useEffect(() => {\n    // Fetch satellite data from Celestrak (replace with your API endpoint)\n    axios.get('https://celestrak.com/NORAD/elements/tle-latest.txt')\n      .then(response => {\n        const lines = response.data.split('\\n');\n        const tleData = [];\n        for (let i = 0; i < lines.length; i += 3) {\n          tleData.push({\n            name: lines[i],\n            tle1: lines[i + 1],\n            tle2: lines[i + 2]\n          });\n        }\n        setSatelliteData(tleData);\n      })\n      .catch(error => {\n        console.error('Error fetching satellite data:', error);\n      });\n  }, []);\n\n  useFrame(() => {\n    if (globeRef.current) {\n      globeRef.current.rotation.y += 0.01;\n    }\n    if (cloudRef.current) {\n      cloudRef.current.rotation.y += 0.015;\n    }\n    if (moonRef.current) {\n      moonRef.current.position.x = Math.sin(Date.now() / 1000) * 12;\n      moonRef.current.position.z = Math.cos(Date.now() / 1000) * 12;\n    }\n\n    // Update satellite positions\n    satelliteRef.current.forEach((satellite, index) => {\n      const satrec = satellite.satrec;\n      const position = satellite.position;\n      const now = new Date();\n      const positionEci = satellite.positionFromTLE(satrec, now);\n      const positionGd = satellite.eciToGeodetic(positionEci, now);\n      satellite.position.set(positionGd.longitude * 111.32, positionGd.latitude * 111.32, positionGd.altitude * 1000);\n    });\n  });\n\n  const earthTexture = new THREE.TextureLoader().load(earthmap1k);\n  const bumpMap = new THREE.TextureLoader().load(earthbump1k);\n  const cloudMap = new THREE.TextureLoader().load(earthcloudmap);\n  const moonTexture = new THREE.TextureLoader().load(moonmap1k);\n  const moonBumpMap = new THREE.TextureLoader().load(moonbump1k);\n\n  return (\n    <>\n      <Sphere ref={globeRef} args={[2, 32, 32]} scale={1}>\n        {/* ... */}\n      </Sphere>\n      <Sphere ref={cloudRef} args={[2.05, 32, 32]} scale={1}>\n        {/* ... */}\n      </Sphere>\n      <Sphere ref={moonRef} args={[1, 10, 10]} scale={1}>\n        {/* ... */}\n      </Sphere>\n      {/* Render satellites */}\n      {satelliteData.map((satellite, index) => (\n        <Sphere key={index} ref={(ref) => { satelliteRef.current[index] = ref; }} args={[0.1, 8, 8]} scale={1}>\n          <meshBasicMaterial color=\"blue\" />\n        </Sphere>\n      ))}\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <Canvas camera={{ position: [0, 0, 5], fov: 50 }}>\n      {/* ... */}\n    </Canvas>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}